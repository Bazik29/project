import QtQuick 2.7
import QtQuick.Controls 2.1


Frame {
    id: page9
    background: TFrameBackgroung{}
    anchors.fill: parent
    clip:true
    property bool test: false

    Flickable {
        anchors.fill: parent
        contentHeight: textt.height
        Text {
            id:textt
            font.pointSize:12
            color: "black"
            width: parent.width
            wrapMode:Text.WordWrap
            text:
            "<h2>Типы алгоритмов</h2>
             Тип алгоритма определяется характером решаемой в соответствии с его командами задачи.
             Различают три типа алгоритмов: линейные, разветвляющиеся, циклические.
             <h4>Линейный алгоритм</h4>
             Алгоритм, состоящий из упорядоченной последовательности действий, не зависящей от значений исходных данных, при этом каждая команда выполняется только один раз строго после той команды, которая ей предшествует.<br>
             <img src='images/p9.1.PNG'>
             <h4>Разветвляющийся алгоритм</h4>
             Разветвляющимися называются алгоритмы, в которых в зависимости от значения какого-то выражения или от выполнения некоторого логического условия дальнейшие действия могут производиться по одному из нескольких направлений.
             Каждое из возможных направлений дальнейших действий называется ветвью.
             В блок-схемах разветвление реализуется специальным блоком «Решение». Этот блок предусматривает возможность двух выходов. В самом блоке «Решение» записывается логическое условие, от выполнения которого зависят дальнейшие действия.
             <h4>Виды разветвляющегося алгоритма</h4>
             <ol>
                <li>«Обход» – такое разветвление, когда одна из ветвей не содержит ни одного оператора, т.е. как бы обходит несколько действий другой ветви.</li>
                <li>«Разветвление» – такой тип разветвления, когда в каждой из ветвей содержится некоторый набор действий.</li>
                <li>«Множественный выбор» – особый тип разветвления, когда каждая из нескольких ветвей содержит некоторый набор действий. Выбор направления зависит от значения некоторого выражения.</li>
             </ol>
             <h2>Циклы</h2>
             Циклические алгоритмы применяются в тех случаях, когда требуется реализовать многократно повторяющиеся однотипные вычисления. Цикл – это последовательность действий, которая может выполняться многократно, т.е. более одного раза.
             <h4>Различают:</h4>
             <ol>
                 <li>циклы с известным числом повторений (или со счетчиком);</li>
                 <li>циклы с неизвестным числом повторений (циклы с предусловием и циклы с постусловием).</li>
             </ol>
             В любом цикле должна быть переменная, которая управляет выходом из цикла, т.е. определяет число повторений цикла.
             Последовательность действий, которая должна выполняться на каждом шаге цикла (т.е. при каждом повторении цикла), называется телом цикла или рабочей частью цикла.<br>
             <h4>Виды циклов</h4>
             <h5>Циклы со счетчиком</h5>
             В циклах такого типа известно число повторений цикла, т.е. оно является фиксированным числом. В этом случае переменная, которая считает количество повторений (шагов) цикла, называется счетчиком цикла (или параметром цикла, или управляющей переменной цикла).<br>
             <img src='images/p9.2.PNG'>
             <h5>Циклы с предусловием</h5>
             Циклы с предусловием чаще всего используют тогда, когда неизвестно число повторений цикла. Циклы с предусловием – это такие циклы, в которых до начала выполнения тела цикла проверяется условие выполнения следующего шага цикла. Если значение этого условия истинно (т.е. условие выполняется), то выполняется тело цикла. В теле цикла должно изменяться значение по крайней мере одной переменной, которая влияет на значение условия (иначе произойдет «зацикливание»). Далее опять проверяется условие выполнения цикла, и если значение условия ложно, то осуществляется выход из цикла.<br>
             <img src='images/9.3.PNG'>
             <h5>Циклы с постусловием</h5>
             Этот тип цикла также используется при неизвестном заранее количестве повторений цикла, но в отличие от цикла с предусловием здесь условие на выход из цикла проверяется после того, как выполнились операторы тела цикла, поэтому хотя бы один раз тело цикла будет обязательно выполнено.<br>
             <img src='images/9.4.PNG'>

            "
        }
        ScrollBar.vertical: ScrollBar {}
    }
}



